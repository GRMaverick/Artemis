
name: "[Runtime] - Build"
run-name: Artemis Runtime
  
on:
  push:
    branches: ["Runtime"]
    
jobs:      
  Build-Debug:
    env:
      SolutionName: ArtemisRuntime\DX12_Project.sln
      Platform: x64
      Configuration: Debug
      Cores: 20

    runs-on: windows-latest
    steps:
    - name: Fetch Latest
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Nuget.exe
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'

    - name: Cache Nuget.exe
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3

    - name: Cache MSBuild
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      
    - name: Restore Nuget Packages
      run: nuget restore $env:SolutionName
      
    - name: Build Target
      run: msbuild $env:SolutionName /t:Build /p:Configuration=$env:Configuration /m:$env:Cores
    
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: ArtemisRuntime_Debug
        path: |
          ArtemisRuntime\x64\Debug\*.exe
          ArtemisRuntime\x64\Debug\*.pdb
          ArtemisRuntime\x64\Debug\*.dll
          ArtemisRuntime\x64\Debug\*.ini
      
  Build-Release:
    env:
      SolutionName: ArtemisRuntime\DX12_Project.sln
      Platform: x64
      Configuration: Release
      Cores: 20

    runs-on: windows-latest
    steps:
    - name: Fetch Latest
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Nuget.exe
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'

    - name: Cache Nuget.exe
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3
      
    - name: Restore Nuget Packages
      run: nuget restore $env:SolutionName
      
    - name: Build Target
      run: msbuild $env:SolutionName /t:Build /p:Configuration=$env:Configuration /m:$env:Cores
    
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: ArtemisRuntime_Release
        path: |
          ArtemisRuntime\x64\Release\*.exe
          ArtemisRuntime\x64\Release\*.pdb
          ArtemisRuntime\x64\Release\*.dll
          ArtemisRuntime\x64\Release\*.ini

  Perform-UnitTests-Debug:
    needs: [Build-Debug]
    runs-on: windows-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: ArtemisRuntime_Debug

    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1.2

    - name: Run Tests
      shell: pwsh
      run: |
        $TestDlls = Get-ChildItem -Path .\ -Filter *.UnitTests.dll -Recurse
        $VSTestArgs = @()
        foreach($Dll in $TestDlls) { $VSTestArgs = $VSTestArgs + $Dll.FullName }
        echo $VSTestArgs
        & vstest.console.exe $VSTestArgs

  Perform-UnitTests-Release:
    needs: [Build-Release]
    runs-on: windows-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: ArtemisRuntime_Release

    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1.2

    - name: Run Tests
      shell: pwsh
      run: |
        $TestDlls = Get-ChildItem -Path .\ -Filter *.UnitTests.dll -Recurse
        $VSTestArgs = @()
        foreach($Dll in $TestDlls) { $VSTestArgs = $VSTestArgs + $Dll.FullName }
        echo $VSTestArgs
        & vstest.console.exe $VSTestArgs