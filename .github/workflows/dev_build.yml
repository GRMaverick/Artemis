name: "Dev - Build"
run-name: Dev Pipeline - ${{ github.ref_name }}

on:
  push:
    branches: [ "*Development*" ]

jobs:
  Build-Runtime-Debug:
    env:
      SolutionName: ArtemisRuntime\DX12_Project.sln
      Platform: x64
      Configuration: Debug
      Cores: 20

    runs-on: windows-latest
    steps:
    - name: Fetch Latest
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Nuget.exe
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'

    - name: Cache Nuget.exe
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3

    - name: Cache MSBuild
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      
    - name: Restore Nuget Packages
      run: nuget restore $env:SolutionName
      
    - name: Build Target
      run: msbuild $env:SolutionName /t:Build /p:Configuration=$env:Configuration /m:$env:Cores
    
    - name: Upload Debug Runtime Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Runtime_Debug
        path: |
          **\*.exe
          **\*.pdb
          **\*.dll
          **\*.ini

  Build-Runtime-Release:
    env:
      SolutionName: ArtemisRuntime\DX12_Project.sln
      Platform: x64
      Configuration: Release
      Cores: 20

    runs-on: windows-latest
    steps:
    - name: Fetch Latest
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Nuget.exe
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'

    - name: Cache Nuget.exe
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3
      
    - name: Restore Nuget Packages
      run: nuget restore $env:SolutionName
      
    - name: Build Target
      run: msbuild $env:SolutionName /t:Build /p:Configuration=$env:Configuration /m:$env:Cores
    
    - name: Upload Release Runtime Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Runtime_Release
        path: |          
          **\*.exe
          **\*.pdb
          **\*.dll
          **\*.ini

  Build-Tools-Debug:
    env:
      SolutionName: ArtemisEditor\Artemis.sln
      Configuration: Debug
      Cores: 20

    runs-on: windows-latest
    steps:
    - name: Fetch Latest
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Cache .NET Core
      id: cache-dotnet
      uses: actions/cache@v3
      with:
        path: "C:\\Program Files\\dotnet"
        key: ${{ runner.os }}-dotnet-7
        restore-keys: ${{ runner.os }}-dotnet-7
        
    - name: Install .NET Core
      if: ${{ steps.cache-dotnet.outputs.cache-hit != 'true' }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3
      
    - name: Restore Target
      run: msbuild $env:SolutionName /t:Restore /p:Configuration=$env:Configuration /m:$env:Cores
      
    - name: Build Target
      run: msbuild $env:SolutionName /t:Build /p:Configuration=$env:Configuration /m:$env:Cores
    
    - name: Upload Debug Tools Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Tools_Debug
        path: |
          ArtemisEditor\**\bin\Debug\**\*.*

  Build-Tools-Release:
    env:
      SolutionName: ArtemisEditor\Artemis.sln
      Configuration: Release
      Cores: 20

    runs-on: windows-latest
    steps:
    - name: Fetch Latest
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Cache .NET Core
      id: cache-dotnet
      uses: actions/cache@v3
      with:
        path: "C:\\Program Files\\dotnet"
        key: ${{ runner.os }}-dotnet-7
        restore-keys: ${{ runner.os }}-dotnet-7
        
    - name: Install .NET Core
      if: ${{ steps.cache-dotnet.outputs.cache-hit != 'true' }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3
      
    - name: Restore Target
      run: msbuild $env:SolutionName /t:Restore /p:Configuration=$env:Configuration /m:$env:Cores
      
    - name: Build Target
      run: msbuild $env:SolutionName /t:Build /p:Configuration=$env:Configuration /m:$env:Cores
    
    - name: Upload Release Tools Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Tools_Release
        path: |
          ArtemisEditor\**\bin\Release\**\*.*

  Perform-Runtime-UnitTests-Debug:
    needs: [Build-Runtime-Debug]
    runs-on: windows-latest
    steps:
    - name: Download Debug Runtime Artifact
      uses: actions/download-artifact@v3
      with:
        name: Runtime_Debug

    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1.2

    - name: Run Tests
      shell: pwsh
      run: |
        $TestDlls = Get-ChildItem -Path .\ -Filter *.UnitTests.dll -Recurse
        $VSTestArgs = @()
        foreach($Dll in $TestDlls) { $VSTestArgs = $VSTestArgs + $Dll.FullName }
        echo $VSTestArgs
        & vstest.console.exe $VSTestArgs

  Perform-Runtime-UnitTests-Release:
    needs: [Build-Runtime-Release]
    runs-on: windows-latest
    steps:
    - name: Download Release Runtime Artifact
      uses: actions/download-artifact@v3
      with:
        name: Runtime_Release

    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1.2

    - name: Run Tests
      shell: pwsh
      run: |
        $TestDlls = Get-ChildItem -Path .\ -Filter *.UnitTests.dll -Recurse
        $VSTestArgs = @()
        foreach($Dll in $TestDlls) { $VSTestArgs = $VSTestArgs + $Dll.FullName }
        echo $VSTestArgs
        & vstest.console.exe $VSTestArgs

  Perform-Tools-UnitTests-Debug:
    needs: [Build-Tools-Debug]
    runs-on: windows-latest
    steps:
    - name: Download Debug Tools Artifact
      uses: actions/download-artifact@v3
      with:
        name: Tools_Debug

    - name: Cache .NET Core
      id: cache-dotnet
      uses: actions/cache@v3
      with:
        path: "C:\\Program Files\\dotnet"
        key: ${{ runner.os }}-dotnet-7
        restore-keys: ${{ runner.os }}-dotnet-7
        
    - name: Install .NET Core
      if: ${{ steps.cache-dotnet.outputs.cache-hit != 'true' }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Run Tests
      shell: pwsh
      run: |
        $TestDlls = Get-ChildItem -Path .\ -Filter *.UnitTests.dll -Recurse
        $VSTestArgs = @()
        foreach($Dll in $TestDlls) { $VSTestArgs = $VSTestArgs + $Dll.FullName }
        echo $VSTestArgs
        foreach($Dll in $TestDlls) { dotnet test $Dll }

  Perform-Tools-UnitTests-Release:
    needs: [Build-Tools-Release]
    runs-on: windows-latest
    steps:
    - name: Download Release Tools Artifact
      uses: actions/download-artifact@v3
      with:
        name: Tools_Release

    - name: Cache .NET Core
      id: cache-dotnet
      uses: actions/cache@v3
      with:
        path: "C:\\Program Files\\dotnet"
        key: ${{ runner.os }}-dotnet-7
        restore-keys: ${{ runner.os }}-dotnet-7
        
    - name: Install .NET Core
      if: ${{ steps.cache-dotnet.outputs.cache-hit != 'true' }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Run Tests
      shell: pwsh
      run: |
        $TestDlls = Get-ChildItem -Path .\ -Filter *.UnitTests.dll -Recurse
        $VSTestArgs = @()
        foreach($Dll in $TestDlls) { $VSTestArgs = $VSTestArgs + $Dll.FullName }
        echo $VSTestArgs
        foreach($Dll in $TestDlls) { dotnet test $Dll }

  Merge-Branch:
    needs: [ 
      Perform-Runtime-UnitTests-Debug, 
      Perform-Runtime-UnitTests-Release,
      Perform-Tools-UnitTests-Debug,
      Perform-Tools-UnitTests-Release 
    ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Change
      uses: actions/checkout@v3

    - name: Merge from Development
      uses: devmasx/merge-branch@master
      with:
        type: now
        from_branch: Development
        target_branch: ${{ github.ref_name }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: Pre-merge Sync from GitHub Action, Triggered by ${{ github.actor }}
      
    - name: Merge to Development
      uses: devmasx/merge-branch@master
      with:
        type: now
        target_branch: Development
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: Post-merge Sync from GitHub Action, Triggered by ${{ github.actor }}
